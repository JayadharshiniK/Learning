Redux: It is a state management library for JavaScript Apps;
* Can be used with React, Angular, Vue, Vanilla JS

Why do we need a state management library?
//Data needed to be synced form one component of the UI to the another;
Data flow happens from one part of the UI to another and change in;

State management solutions:
1. Flux (by Facebook)
2. Redux --simple and elegant
3. Mobx

//Store:--we store all the application state inside a central repository that is
single repository that is a single JavaScript object called the store (some kind of
database for the frontend)

Redux:
1. Centralizes application's states
2. Makes data flow transparent and predictable

PROS:
1. Predictable state changes:- we can easily see what exactly is going on and how
the application state changes in response to every action.
2. Centralized state: all the data our application needs is stored in a single
place that is accessible by all parts of the UI.
3. Easy Debugging
4. Cache or preserve page states
5. Implement Undo/Redo features;
6. Ecosystem of add-ons

CONS:
1. Introduces some indirection and complexity in your code:- because redux is based on
functional programming principles
2. Verbosity:- We have to write some boilerplate code to get things done

Basic Terms:
1. Redux: A complex state management tool, with a single store as CDS (central data store)

2. Reducer: Manages the State and returns the newly updated state;
they are the function which manages the state of the function

3. Actions: this is a part of the reducer function, which is actually the parameter;
//pure object which is sent or dispatched from the view
Have 2 type properties:
-> type unique identifier
-> payload which has data

4. Dispatch: Dispatch is used to send actions to update the data

Redux environment set-up:
1. Create a react-app
2. Install redux packages using:- npm install redux react-redux

//How to create the store:
STEP1: import createStore from 'rdeux';

const reducerFn = (state,action) => {

}
const store = createStore(reducerFn)

STEP2: give access to the store for all the components used in the app through the index.js file
CODE: import { Provider } from 'react-redux';

STEP3: Add the Provider to cover the <React.StrictMode> --wrap the <Provider> tag to the component

Old Redux:
1. You have to configure Redux DevTool Extension explicity
2. We need to manually handle and change the state immutably
3. Configuring a Redux Store is too complicated
4. Need to create reducers and creators separately - lots of boilerplate code
5. Lots of code need to write to handle asynchronous requests and handling error
code was also manual;
6. Class Bases implementation


New Redux:
1. It provides automatic support for Redux DevTools Extension.
2. It provides the support for Immer.js library which automatically changes the
code immutably
3. Configuring a Redux store is much easier and built in support of middleware
4. A createSlice() function that comes in handy to replace create action and create
Reducer functions with a single function;
5. createAsyncThunk to make asynchronous requests;
6. Functional implementation with TypeScript and supports of hooks


//Creating Routers:
1. Install react-router using the following command:
npm i react-router-dom

2. Import router in the app.js file using following import statement:
import {createBrowserRouter, createRoutesFromElements, RouterProvider} from 'react-router-dom';

3. Create a simple Route in the app.js function:
const router = createBrowserRouter(createRoutesFromElements)(
    <Route>
      <Route></Route>
    </Route>
  )


///Router must be the root components for all the other components in the APP

4. Creating a reducer:
reducers: {
        add(state, action){
           state.push(action)
        }
    }

5. Updating the store to components; linking them to manage the states;

//React-Redux Hook Explanation:
*React Redux offers a set of Hooks as an alternative to the existing connect()higher
order component
*These hooks allow you to connect to the redux store and dispatch actions without
having to wrap your components in connect()

useSelector:
useSelector is equivalent to mapStateToProps()
It takes in a function argument that returns the part of the state that you want;

useDispatch:
useDispatch is equivalent to mapDispatchToProps()
This hook returns a reference to the dispatch function from the Redux store. You
may use it to dispatch actions as needed
