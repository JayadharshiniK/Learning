Building a website with adv. CSS
--------------------------------
PROJECT: NATOURS

1. The best way to perform a basic reset using the universal selector
2. How to set project-wide font definitions
3. How to clip parts of elements using 'clip-path'

Make the initial setup for css coding-images, linking required cdn
Write a basic reset for the webpage in css code before starting

tip1: box sizing:---borders and paddings are no longer added to the total width or total height
tip2: add the font family in body part for a good practice

95vh----everytime the height must be 95% of the viewport height
linear-gradient----to make gradients across the screen
R: clippy-css clip path maker


4. The easiest way to center anything with the transform, top and left properties

//create a text-box class and style the elements: use position: absolute; top 50% and left 50%
//then translate the box to the required length (translate: -50%, -50%)---
**this will make to move 50% in of the box's height in opp. of x and y directions respectively
//it nicely gets adapted to any screen sizes

adding logo and text to the header
alt tag(attribute tag)--for seo optimation &
                      --if the image fails to load there then the text appears for the user

tip3: span element is used to style some text differently

5. How to create CSS animations using @keyframes and the animation property
text-entrance animations

to fix shaky
backface-visibility: hidden;----determines the hiding of the back part of the
elements; also helps to fix the shaky part of the element while animation

tip4: ctrl+d=selects the multiple element of same property

6.What are pseudo-elements and pseudo-classes are;
How and why to use the ::after pseudo-element;
How to create a creative hover animation effect using the transition property

'PSEUDOCLASSES' are special state of a selector/classes
used to style elements under special conditions
eg. .class: hover
    .class: link
    .class: active
    .class: visited---it appears after once the user and clicked (eg. links
    become blue to purple once clicked)

tip5: padding:15px 40px;---the first value is for top & bottom and the second
value is for left & right
padding:15px;---for all
padding  : 15px 20px 30px 40px;---(top, right, bottom, left)

button animation---for a real 3d effect
hover--transform: translateY(-3)
active--transform: translateY(-1)

2 types of animation---transition & @keyframes

box-shadow: (X Y BLUR RGBA);

after pseudo-element: to add an element that looks exactly like the button that
we already have but we put it behind the button
It is often used to add cosmetic content to an element with the content property.
It is inline by default.

pseudo-element behaves like a child element

CODING UP FOR button COMING UP effect
0% {
transform: translateY(30px)
}
100%{
transform: translateY(0px)
}

animation-fill-mode: backwards;
--it will automatically apply the styles of 0% before the animation starts
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
HOW CSS WORKS: A LOOK BEHIND THE SCENES
---------------------------------------

THREE PILLARS OF WRITING GOOD HTML AND CSS
------------------------------------------
RESPONSIVE DESIGN:-Building one website that works across all screen sizes on all devices

1. Fluid layouts:
2. Media queries:
3. Responsive images:
4. Correct units:
5. Desktop-first vs mobile-first strategy:


MAINTAINABLE AND SCALABLE CODE:-
Clean
Easy-to-understand
Growth
Reusable
How to organize files
How to name classes
How to structure HTML


WEB PERFORMANCE:-Making a website or app more performant means to make it faster
and to make it smaller in size, so that the user has to download less data.

Less code
Less HTTP requests
Compress codes
Use a CSS preprocessor like Saas
Less images
Compress Images


HOW CSS WORKS: A LOOK BEHIND THE SCENES(OVERVIEW)
-------------------------------------------------
What happens to CSS when we load up a webpage?

1.Load HTML
2.Parse HTML-To decode the html code line by line and loads CSS also
3.The browser builds up the DOM(Document Object Model)-describes the entire web
document like a family tree
DOM- stores all the decoded html code
4.Parsing of CSS (complicated)
//conflicting CSS declarations are resolved through a process known as cascade
//to process final CSS values (eg. converting %values-px)
5.The CSS is also stored in a tree-like structure called the CSS object model, similar to the DOM
6.HTML and CSS parsed and stored, these together form the so-called Render Tree
7. We have everything for website rendering: the visual formatting model
//visual formatting model calculates and uses a bunch of stuff like box model, floats and positioning
8.Finally, the rendered website is rendered or painted to the screen and the process is finished.


HOW IS CSS PARSED,
PART 1; THE CASCADE AND SPECIFICTY
-----------------------------------------------------

Eg.
.my-class {
color: blue;
text-align: center
font-size: 20px
}

//.my-class---selector
// font-size --property
//20px--declared value


STEP1: To resolve conflicting CSS declarations--(cascade)
*CASCADE: Process of combining different stylesheets and resolving conflicts
between different CSS rules and declarations, when more than one rule applies to
a certain element.

Different CSS:
//author declarations(developer CSS)
//user declarations(user CSS)- eg. when user changes the default font size
//default browser declarations (user-agent CSS)-anchor tags get blue underlined

Importance > SPECIFICTY > source order

Based on Importance:
1. User '!important' declarations
2. Author '!important' declarations
3. Author declarations
4. User declarations
5. Default browser declarations

//If same importance:
Second factor considered:- SPECIFICTY of the property given to the elements
1. Inline styles
2. IDs
3. Classes, pseudo-classes, attribute
4. Elements, pseudo-elements

eg.
 .button{
  font-size: 20px;                    ----(0,0,1,0)
  color: white;
  background-color: blue;
 }

nav#nav div.pull-right .button {      ----(0,1,2,2)
 background-color: green
}

a {
 background-color: purple;            ----(0,0,0,1)
}

#nav a.button:hover {
 background-color:yellow;             ----(0,1,2,1)
}

*According to the specificity comparison given above:
the second declared wins and becomes the cascaded value

//if same specificity:
source border:
The 'last declaration' in the code will override all other declarations and will be applied.
--------------------------------------------------------------------------------
* CSS declarations marked with '!important' have the highest priority;
*But, only use '!important' as a last resource. It's better to use correct specifications- more maintainable code
*Inline styles will always have priority over styles in external stylesheets;
*A selector that contains 1 ID is more specific than one with 1000 classes;
*A selector that contains 1 class is more specific than one with 1000 elements;
*The universal selector* has no specificity value (0,0,0,0);
*Rely more on specificity than on the order of selectors;

RESOURCE: CodePen for web development: (html, css and js in single page)


STEP2: To process the final CSS values

How CSS values are processed?--6 steps:
--------------------------------------

1. Declared value (author declarations):
Analyzing the declaring value
eg. width:66%, 140px

2. Cascaded value (After the cascade):
Selected value according to property
eg. 66%

3. Specified Value (Defaulting, if there is no cascaded value):
Applying of default CSS initial value for the property, if not any declared value by the author
//different properties have different initial Values

4. Computed value (Converting relative values to absolute value):
Values of relative units are converted into px
eg. vh--real value
1rem--24px {1.5*16px (Default)}

5. Used value (final calculations, based on layout):
calculation using CSS engine for the remaining units
eg. %values to px units
66% of 240px (parent element's value) = 184.4 px

6. Actual value(browser and device restrictions-rounded off to whole numbers):
Actual value rounded of as computer cannot show the pixels in decimal
eg. 184.4--185px

PART2: VALUE PROCESSING
-----------------------
How units are converted from relative units to absolute(px):
-----------------------------------------------------------
//em--emphermeral units:-em values are relative to the font-size of the nearest parent element
//rem-relative em: rem values are relative to the root font-size of the html (16px)

Example chart for conversion of different units:

%(fonts):  150%      ---      x% of parent's         ---  24px
                         computed font-size

%(lengths): 10%      ---      x% of parent's         ---  100px
                          computed width(1000px)

em(fonts):  3rem     ---      x of parent's          ---  72px (3*24)
                         computed font-size

em(lengths): 2em     --- x of current element's      ---  48px
                         computed font-size

rem       : 10rem    ---      x of root              ---  160px
                         computed font-size

vh        :  90vh    ---       x of 1% of            ---  90% of the
                            viewport height          current viewport height

vw        :  80vw     ---      x of 1% of             ---  80% of the
                            viewport width            current viewport width


PART3: INHERTITANCE IN CSS
--------------------------
*INHERITANCE is a way of propagating property values from the parent elements to their children.

*Every CSS property must have a value.

*If there is no cascaded value, then the property can be inherited.

*Some properties can be inherited & others are not.
Properties related to text are inherited: font-family, font-size, color, etc.
Other properties such as margins and padding are not inherited

*The computed value of a property is what gets inherited, not the declared value
The value that gets inherited is not simply the 150%, but the computed value.
eg. 150% of 20px (font-size) = 30px

*Inheritance of a property only works if no one declares a value for that property;

*The 'inherit' keyword forces inheritance on a certain property;

*The "initial" keyword resets a property to its initial value;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

How and why to use rem units on our projects:
1. Change all the px units into rem (relative units)
//helps to change all the measurements on our page with one simple setting
//to make it more Responsive
tip: setting the html font-size to 10 px helps in reducing the calculations;
tip: use only dot before decimals, we don't need any zero

A great workflow for converting px to rem;

Advanced property for responsive website: A good practice one
-------------------------------------------------------------
PROBLEM:
*It is a bad practice to set the html font-size to be in px also
*The problem is that by doing so we actually override the browser font-size setting
that the user can manually change in the settings, for eg. when they have a bad sight.
*So, if we set our font-size to 10px, then we remove the ability for these people
to see our website properly, because they no longer change the default font size.
*And even if they change, the root font size will not be affected by that anymore.

SOLUTION:
*Setting a overall font size to percentage, which will translate to a percentage
of the font-size given by the browser.
*Absolute default font-size is 16px, so:
100% = 16px (if the user changes to 18px, then the font size will be 18px)
*But, here we want 10px as the root-font size for easy calculations
so, here:
10/16 *100
=0.625*100
=62.5%
======

*Whatever font size the user want can be calculated automatically by the browser
and it will visible in a accurate manner as we designed.
*In other words, we allow the user to zoom in on the page automatically, not
only to change the font-size, but also zoom in on the page (not only zooming, but
also increasing all of the measurements that we have on our page)

//WARNING;--rems are not supported below Internet Explorer 9

//Apply the box-sizing property in the body tag and force the box-sizing to be inherit
in the universal selector, as box-sizing is not simply inherited.
--It will automatically inherit the box-sizing property to all the elements

//Update the universal reset, by adding
*::after,
*::before

//because until then, only the real elements get the declared property, but the after
and before pseudo-elements, don't get this behavior.
--------------------------------------------------------------------------------

WEBSITE RENDERING PHASE:
-----------------------
HOW CSS RENDERS A WEBSITE: THE VISUAL FORMATTING MODEL

*THE VISUAL FORMATTING MODEL: Algorithm that calculates boxes and determines the
layout of these boxes, for each element in the render tree, in order to determine
final layout of the page.

* The factors that this Algorithm takes into account are:

1. Dimensions of boxes: the box model;
//each and every element on a webpage can be seen as a rectangular box
//each box can have a width, a height, a padding, margins and a border
//content of the box: text, images, etc.;
//padding: transparent area around the content, inside of the box;
we use paddings to generate white space inside of a box
//border: goes around the padding and the content;
//margin: space between boxes;
the margin is white space that's actually outside the box
we use margins to generate white space between the boxes
//fil area: area that gets filled with background color or background image
includes the padding and the border, but not the margin area

The Box Model: heights and widths
Total width: right border + right padding + specified width + left padding + left border
total height: top border + top padding + specified height + bottom padding + bottom border

box-sizing: border-box;--removes the padding and the border from total height and width.

2. Box type: inline, block and inline-block;

1# Block-level boxes-
*Elements formatted visually as blocks
*100% of parent's widths
*Vertically, one after another
*eg:
display: block;
(display: flex)
(display: list-item)
(display: table)

2# Inline boxes-
*Content is disturbed in lines
*Occupies only content's spaces
*No-line breaks
*No heights and widths
*Paddings and margins only horizontal (left and right)
*eg.
display: inline;

3# Inline-block boxes-
*A mix of block and Inline
*Occupies only content's space
*No-line breaks
*eg.
display: inline-block;

3. Positioning scheme: floats and positioning (relative or absolute)

#1 Normal flow:- means is that the elements are simply laid out on the page in a natural order in the code
*Default positioning scheme;
*NOT floated;
*NOT absolutely positioned;
Elements laid out according to their source border
*eg. position: relative

#2 Floats:- The float property causes an element to be completely taken from the
normal flow and shifted it to the left or right as far as possible, until it touches
the edge of its containing box, or another floated element.
*Element is removed from the normal flow;
*Text and inline elements will wrap around the floated element;
*The container will not adjust its height to the element.

#3 Absolute positioning:-
*Element is removed from the normal flow;
*No impact on surrounding content or elements;
*We use top, bottom, left and right to offset the element from its relatively positioned container.

4. Stacking contexts;
5. Other elements in the render tree; such as siblings or parents;
6. Other external information such as viewport size, Dimensions of images, etc.
-----------------------------------------------------------------------------------------------------

CSS ARCHITECTURE, COMPONENTS AND BEM
------------------------------------

The think-build-architect mindset:
---------------------------------
*The important feature of a good CSS coding:
1# RESPONSIVE DESIGN
2# WEB PERFORMANCE
3# MAINTAINABLE AND SCALABLE CODE;
--Clean
--modular
--Reusable
--ready for growth

*The best mindset:
1# THINK: Think about the layout of your webpage or web app before writing code
Component-driven design:
*Modular building blocks that make up interfaces;
*Held together by the layout of the page;
*Re-usable across a project, and between different projects;
tip# Build a library of your components and then reuse them across projects which will speed up your development;
*Independent, allowing us to use them anywhere on the page.

2# BUILD: Build your layout in HTML and CSS with a consistent structure for naming classes
BEM METHODOLGY
--------------
*BLOCK ELEMENT MODIFIER
eg. .block__element--modifier {/* Styles */}

*BLOCK: (standalone component that is meaningful on its own):
A block represents an object in your website.
Most common blocks on every website today are header, content, sidebar, footer, and search.

*ELEMENT: (part of a block that has no standalone meaning):
An element is a component within the block that performs a particular function.
It should only make sense in the context of its block

*MODIFIER:(a different version of a block or an element):
A modifier is how we represent the variations of a block. eg.
a content featured article
a menu link
a search field with or without icon

*Functions of BEM:
#to speed up the development process;
#to ease the teamwork of developers by arranging CSS classes into independent modules;
#to use BEM only with classes, and not IDs

3# ARCHITECT: Create a logical architecture for your CSS with files and folders.
The 7-1 pattern: (introduced by Hugo Giraudel):
*7 different folders for partial Sass files, and 1 main Sass file to import all
other files into a compiled CSS stylesheet.

*THE 7 FOLDERS:
1# base/
2# components/
3# layout/
4# pages/
5# themes/
6# abstracts/
7# vendors/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
IMPLEMENTING BEM IN THE NATOURS PROJECT
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
INTORDUCTION TO SASS AND NPM
----------------------------
WHAT IS SASS AND HOW DOES IT WORK?
SASS- Syntactically awesome stylesheets
*SASS: Sass is a CSS preprocessor, an extension of CSS that adds power and elegance
 to the basic language.
SASS SOURCE CODE------<SASS COMPLIER>--------COMPILED

*Instead of writing a CSS file with regular CSS code, we write SASS code in Sass files.
Then, we run a complier, and that compiler converts the SASS code we wrote into regular CSS code.
That's why it's called a CSS preprocessor.

MAIN SASS FEATURES
------------------
1# Variables: for reusable values such as colors, font-sizes, spacing, etc.;
*A variable is just like a container where we can some store data, for eg. like the name of a color.
And then we can reuse it all over our code.

2# Nesting: to nest selectors inside of one another, allowing us to write less code;
*It's about selecting sub-elements into main elements inside the same bracket itself
'&'---using the ampersand symbol (it actually write the selector path up until this point)

3# Operators: for mathematical operations right inside of CSS;
4# Partials and imports: to write CSS in different files and importing them all into one single file;
5# Mixins: to write reusable pieces of CSS code;
//when you want to apply the same set of styles to different tags or blocks
6# Functions: similar to mixins, with the difference that they produce a value that can be used;
7# Extends: to make different selectors inherit declarations that are common to all of them;
8# Control directives: for writing complex code using conditionals and loops;

*There are two kinds of syntax for SASS:
SASS--without brackets and colons, follows only the indentation
SCSS--with colon marks and brackets----THE MOSTLY USED ONES!

SCSS Syntax:---Sassy CSS
RESOURCE: BRACKET PAIR COLORIZER!----to give each set of braces their own unique color
* For SCSS we can write the comments using //--only

*tip# when we apply float property to our inline-block elements, then the background
color disappears, that's because all of the child elements of the parent container are
floating and so the element collapses and it loses all its height. To solve this, we can use
the clearfix method. We usually created a class called a clearfix and then added it
to the element.

*DRY Principle: DON'T REPEAT YOURSELF!--Meaning the code

Functions:
@function divide ($a, $b) {
 @return $a / $b;
}

Extends:
@extend %btn-placeholder;

Mixins vs extends:
In mixins , the code get copied to the mentioned selector;
In  extends, the selector gets copied to the mentioned extend code

Mixins vs functions:
@mixin, very similar to a function but the main difference between the two is that
mixins output lines of Sass code that will compile directly into CSS styles,
while functions return a value that can then become the value for a CSS property
or become something that might be passed to another function or mixin.

--------------------------------------------------------------------------------
A BRIEF INTORDUCTION TO  THE COMMAND LINE
-----------------------------------------
cd---current directory or changes the current directory
dir---displays a list of directory's files and subdirectories
cd.. ---moves back to the the home folder
click tab to auto complete a relevant folder name
mkdir---make directory for creating a new folder
type nul 'file name'---creates files inside a folder
cls---for clearing the CMD screen
del---deleting the files(permanently deletes the file)
up-arrow---shows previously written COMMAND
down-arrow---to show recently written COMMAND
--------------------------------------------------------------------------------

A BRIEF INTRODUCTION TO NPM AND THE NODE ECOSYSTEM
--------------------------------------------------

Node JS:-It is an open source that allow developers to write and run JavaScript
applications on the server. Developers started using node.js to also write tools
top help them with local web development.

NPM: NPM(Node package manager) is a simple command line interface that allows
developers to install and manage packages on their local computers. There are all
kinds of open-source tools, libraries and frameworks needed for modern
development. Modern web development could simply not exist without a package manager.

Steps to install Sass on local computer:-
-----------------------------------------
1. Install the package from net to local computer
2. Open command prompt
3. Go to folder c----"cd c:"
4. Write---"node -v" and then enter
5. CHECK FOR THE NODE JS VERSION INSTALLED;
v20.4.0

6.Then navigate to the project folder, so that we can start using NPM right now
//this is to create a package called package.json file which basically will contain
the definitions of our project and where NPM will write the packages.

7. In the line of project folder opened, run simply "npm init" on the command lines
// NPM in it will open this program here (With many description given)
//It is a simple helper which will create the package.json file in the project folder

8. Press enter to name it and also can give description(optional)
9. Press enter for "is it ok (yes)"

***now the file got added in our project file

//FINALLY INSTALL SASS COMPILER:---
10. Write--"npm install node-sass --save-dev" and press enter
//you can view the "devDependencies" along with the installed version of Sass in the package.json file
// dev dependencies---tool for development

**That's it we are ready to write and compile SASS
----------------------****-------------------------------------------------------
///////* write again npm install jquery --save
//for installing jquery functions to in our project (if needed later)


Now you can see a folder named node modules, containing a lot of files for the packages to run

//we don't need to share the node modules file, as we can get it from package.json file
//-- to get the node modules file for a project,
in command prompt, write "npm install" and then press enter
---------------------------------------------------------------------------------
NPM Scripts:

//npm init   //It creates initial project
npm install  //It reads package.json file and creates node_modules and adds all dependency mentioned in packages.json dependecies
npm add <PackagaName>    Eg.  npm add bootstrap
npm remove <Packagename>  Eg.  npm remove bootstrap

// edit your script as:
"node-sass sass/main.scss css/style.css -w"
to watch all your changes across the scss file
then run your npm to get the changes done live
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
NATOURS PROJECT-USING ADVANCED CSS AND SASS;
--------------------------------------------
CONVERTING OUR CSS CODE TO SASS: VARIABLES AND NESTING
Making changes over the css code as sass code with functions, and nesting the elements
with their similar group.

IMPLEMENTING THE 7-1 CSS ARCHITECTURE WITH SASS;
-----------------------------------------------
*7-1 Pattern-- where we create seven folders and one main SASS file to import all
the files that are in these folders.

Step 1:-start with creating base folders: 'base' folder--inside sass folders
*inside base folder, create a file "base SASS file"--This file will be for the real low
level basics, such as resets and styles for html and body element selectors. This must
be a partial file for easy import options.
//A partial file --they always start with an underscore

*create the base folder as
"_base.scss"
"_amimations.scss"
"_typography.scss"
"_utilities.scss"

*This type of architecture is designed to handle large multi-page websites or web apps.

Step 2:-Create another folder named: "abstracts" in the sass file to store mixins, functions and variables;
Under that create:
"_functions"
"_mixins"
"_variables"

Step 3:-Create another folder "components"
//components are our resusable building blocks that make up our websites or apps;
they are completely independent and held together by the layout of the page;

Step 4:-Create a "layout" folder
// A layout folder for each piece of the global layout of the entire project;

Step 5:- Create a folder named "pages"
//in that we can create a new file for that specific page
//eg. homepage

**Another two folders are-- themes (for web app with different themes)
- vendor folder--where we can put third party css (eg, the scss file of the boot strap or an icon system or an animation framework)

Step 6:- Separate the written code so far into the created files.
--------------------------------------------------------------------------------

REVEIW: RESPONSIVE DESIGN PROINCIPLES AND LAYOUT TYPES
------------------------------------------------------

4 BASIC RESPONSIVE DESIGN PRINCIPLES
------------------------------------
*Responsive web design is essentially a technique that we can use to make a webpage,
adjust its layout, and its visual style to any possible screen size.
*It makes the website usable on all possible kinds of devices.

1. FLUID LAYOUTS
2. RESPONSIVE UNITS
3. FLEXIBLE IMAGES
4. MEDIA QUERIES

1. FLUID LAYOUTS:
* To allow webpage to adapt to the current viewport width (or even height);
*Use % (or vh/vw) unit instead of px elements that should adapt to viewport (usually layout)
*Use max-width instead of width;

*In CSS, there are currently three major ways of laying out a webpage or web application
1# FLOAT LAYOUTS:-
The old way of building layouts of all sizes, using the float CSS property. Still used, but getting outdated

2# FLEXBOX:-
Modern way of laying out elements in a 1-dimensional row without using floats;
Perfect for component layouts.

3# CSS GRID:- For laying out element in a fully-fledged 2-dimensional grid.
Perfect for page layouts and complex components.

//Why we use a float layout in this project?
*The most focus of this project is on using modern CSS properties and techniques:
clips, transforms, animations, background video, etc
*Even though flexbox and CSS grid are more modern, every web developer should still
know how float layouts work;
*As a professional developer, your job will include working with older CSS codebases,
which will contain float layouts

2. RESPONSIVE UNITS:
*Use rem unit instead of px for most lengths
*To make it easy to scale the entire layout down(or up) automatically

3. FLEXIBLE IMAGES:
*By default, images don't scale automatically as we change the viewport, so we
need to fix that
*Always use % for image dimensions, together with the max-width property

4. MEDIA QUERIES:
To change CSS styles on certain viewport widths (called breakpoints)
--------------------------------------------------------------------------------
BUILD A CUSTOM GRID WITH FLOATS:
--------------------------------
// how to architect and build a simple grid system;
//how the attribute selector works;
//how the :not pseudo-class works;
//how calc() works, and what's the difference between calc() and simple Sass operations.

GRID:- A grid is just a design system which allows us to build consistent interfaces.
This kind of grid allow us to divide our available space in required equal parts.

tip# : One of the standards used these days, is to make a 1140 pixels grid.
tip# : "margin : 0 auto;"---used to center block elements at any specified width;
tip# : The not pseudoclass selects all the things except the mentioned
tip# : calc()--allows us to do mathematical operations with mixed units

**attribute selector: The [attribute|="value"] selector is used to select elements with the specified attribute,
whose value can be exactly the specified value, or the specified value followed by a hyphen (-).

tip#: ^ -this symbol would select the class which is similar to the property mentioned
*-select any class which contain the part mentioned
$- select any class that ends with the mentioned property

tip#: <!-- = for opening the comment column
      --> = for closing the comment area

Layout grid html#:-

<section class="grid-test">
        <div class="row">
            <div class="col-1-of-2">
                Col 1 of 2
            </div>
            <div class="col-1-of-2">
                Col 1 of 2
            </div>
        </div>

        <div class="row">
            <div class="col-1-of-3">
                Col 1 of 3
            </div>
            <div class="col-1-of-3">
                Col 1 of 3
            </div>
            <div class="col-1-of-3">
                Col 1 of 3
            </div>
        </div>

        <div class="row">
            <div class="col-1-of-3">
                Col 1 of 3
            </div>
            <div class="col-2-of-3">
                Col 2 of 3
            </div>
        </div>

        <div class="row">
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
        </div>

        <div class="row">
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
            <div class="col-2-of-4">
                Col 2 of 4
            </div>
        </div>

        <div class="row">
            <div class="col-1-of-4">
                Col 1 of 4
            </div>
            <div class="col-3-of-4">
                Col 3 of 4
            </div>
        </div>

    </section>

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

BUILDING THE ABOUT SECTION-PART 1
---------------------------------
/Thinking about components;
/How and why to use utility classes;
/How to use the background-clip property;
/How to transform multiple properties simultaneously;
/How to use the outline-offset property together with outline;
/How to style elements that are not hovered while others are.

*Follow THINK-BUILD-ARCHITECT MINDSET

tip#: To take the section up, use negative margin
tip#: to get the background clipped to the required space, use '-webkit-background-clip: text;'
tip#: text-shadow: X Y Blur length rgba($color: #000000, $alpha: .2);

tip#: Utility classes: They are very simple classes in CSS, with one simple text
eg. "u-center-text"
//add the styles in utilities file created already

tip#: When you don't want to give the margin (or any property), to the code which is to be reused all over the page,
then go for a utility;

tip#: When you don't want the last one to be not applied for property; then use":
&:not(:last-child) {
    margin-bottom: 3rem;
    }

tip#: If it really a small unit, then we can write it in px units itself
tip#: To get img classes, use emmet shorthand (using BEM):
.className>(img.className__element.className--element)*x
//x is the number of times we want the code to be written;
 eg.
code: .composition>(img.composition__photo.composition__photo--p1)*3
output:
<div class="composition">
                    <img src="../img/nat-1-large.jpg" alt="Photo 1" class="composition__photo composition__photo--p1">
                    <img src="../img/nat-2-large.jpg" alt="Photo 2" class="composition__photo composition__photo--p2">
                    <img src="../img/nat-3-large.jpg" alt="Photo 3" class="composition__photo composition__photo--p3">
                </div>


 tip#: To get the position one top of another, use absolute positioning;

 tip#: To get a collage model of images placed, use the following code in composition sass file:

 .composition {
    position: relative;

    &__photo {
        width: 55%;
        box-shadow: 0 1.5rem 4rem rgba($color: #000000, $alpha: .4);
        border-radius: 2px;
        position: absolute;


        &--p1{
            left: 0;
            top: -2rem;
        }

        &--p2{
            right: 0;
            top: 2rem;
        }

        &--p3{
            left: 20%;
            top: 10rem;
        }
    }
}

tip#: To get flexible images, define the width of images in percentages, to get nicely to screen sizes;
tip#: To get a outside border, use outline property & give an outline-offset;

tip#: To select the not hovered nested class:
&:hover &__photo:not(:hover) {
        transform: scale(.95);
    }
tip#: To get a cooler animation effect over zoom use:
transform: translateY(-.5rem)

================================================================================
BUILDING THE FEATURES SECTION
-----------------------------
/How to include and use an icon font;
/Another way of creating the "skewed section" design;
/How and when to use the direct child selector

To get icon fonts:-
1# R: linea.io
2# Download the required set of files
3# Copy it to our project css folder
4# Include it in the HTML before the main style link:
"<link rel="stylesheet" href="css/icon-font.css">"

To to include the icons:
1# Create a class for it in the html
2# Copy the class name as:
<i class=icon-basic-world"></i> ---> i = icons

To create 4 columns with a feature box with them:

Code: ".row>.col-1-of-4>.feature-box"

Output: <div class="row">
            <div class="col-1-of-4">
                <div class="feature box"></div>
            </div>
        </div>

tip#: To get card type boxes, use feature-box inside a the main column as a separate element
tip#: alpha is for opacity---
eg. .8 alpha= 80% of the image and 20% of the bg image

tip#: best for box shadows:
box-shadow: 0 1.5rem 4rem rgba($color: #000000, $alpha: .15);

tip#: Trick for making different shapes for the container:
SIMPLY SKEW THE ENTIRE SECTION
**skew the content box of the skewed section in the opposite direction to make it right.

tip# :To only select the direct child(it only selects the first child and not the heirs of it*), use:
scss--> & > *
css--> .section-features *

================================================================================
BUILDING THE TOURS SECTION -PART1
---------------------------------
/How to build an amazing, rotating card;
/How to use perspective in CSS;
/How to use the backface-visibility property;
/Using background blend modes;
/How and when to use box-decoration-break;

Building the cards:
*Turning card: Rotating 180 deg. across the y-axis
*Give particular hover effects on particular cards or components

tip#: To get a user centered movement, give a perspective property:
 perspective: 150rem;
 **put a larger value of rem so that the perspective is perfect and not to enlarged!
**The front is initally at 0 deg rotation and 180 deg at hovered;
**The back is initally rotated to 180deg, and reaches 0 deg. at hovered;

*//*backface-visibility: hidden;----determines the hiding of the back part of the
elements

**we can apply more amazing effects on background image, instead of normal image tag;
//&nbsp;--->non-breaking space

//background-blend mode property describes how the elements, background images, should blend;
//when there is to blend multiple backgrounds, then use this background-blend property;
//there are different options for the property
//this is a new property, so it does not work with older browsers;

eg. background-blend-mode: screen;

tip#: To fix the overlapping background image to the container:
under the border radius property, use:
overflow: hidden;

tip#: To get a polygon-clip:
clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

//to work across all the browsers:
-webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);

tip#: Box decoration break
**The box-decoration-break property specifies how the background, padding, border,
border-image, box-shadow, margin, and clip-path of an element is applied when the
box for the element is fragmented.

tip#: To bring the blocked element to center, use:
margin: 0 auto;
=> top and bottom: 0
=> right and left: automatically calculated by the browser

DESIGNING THE BACK PART:
tip3: to create a simple link pointing to nowhere, :
a.btn----> <a href="" class="btn"></a>
================================================================================

BUILDING THE STORIES SECTION - PART 1
-------------------------------------
/How to make text flow around shapes with shape-outside and float;
/How to apply a filter to images;
/How to create a background video covering an entire section;
/How to use <video> HTML element;
/How and when to use the object-fit property;

tip#: Use figure tag:
The <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.
<figure>
  <img src="img_pulpit.jpg" alt="The Pulpit Rock" width="304" height="228">
</figure>

Tip#: To align the text according to the shape given, use the shape outside property;

// Defining a circle:
(Radius[50%] at 50% 50%);-----50% 50%--The exact horizontal and vertical center.

//The best way to move with the element that is floated is to use transform, instead of margins;

// For flexible width, they always need a width,
the width=> width/height: 100%; //---100% of the parent's width i.e. 15rem

// To select the direct child=>
& > *;

//We can't apply two transform properties at the same time;
//Special HTML elements for captions for figures: "figcaptions"

//Simple code to bring things to the exact center:
position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%)

//  &:hover &__caption {

    }
==>The change happens on the story caption when the story is hovered.
tip#: When there are animation or translate glitches happen, the backface visibility can fix that most of the time;

//The is amazing filter properties on css to make the effects
eg.
 filter: blur(3px) brightness(80%);
--> more the px, more the blur value
--> more the percentage than 100%, then more brighter the image is;

PART-3 ADDING A BACKGROUND VIDEO;
--------------------------------
* Add an element to this section and make it the exact same size as the section;
*Put the video in that container

//The source tag in the html, which allow us to write to embed a video file into this vidoe element:
<source src="img/video.mp4" type="video/mp4">
<source src="img/video.webm" type="video/webm">

RESOURCE: "coverr"--for downloading videos!

//--> autoplay, muted, loop are some commands given to the video tag!

//object-fit: cover;----> The element will fill the entire parent while still maintaining the parent ratio;
and the content that does not cover the parent dimension will be simply clipped off!

--------------------**********************************--------------------------
BUILDING THE BOOKING SECTION - PART 1:

/How to implement "solid-color gradients";
/How the general and adjacent sibling selectors work and why we need them;
/How to use the ::input-placeholder pseudo-element;
/How and when to use the :focus, :invalid, placeholder-shown and : checked pseudo-classes;
/Techniques to build custom radio buttons;

Q:How the section gets the height and width:
**it gets the height due to the padding given and the internal element placed and their height property;
**We create a row, because we want to center that box nicely in the middle;

tip#: background-size: cover =100%
// To get a solid gradient with a background:

linear-gradient(105deg, rgba($color-white, .9) 0%, rgba($color-white, .9) 50%, transparent 50%),
                    url(../../img/nat-10.jpg);

*&::-webkit-input-placeholder---for pseudo-elements; only works in safari and chrome

//sibling-selector:  Helps to select the adjacent siblings (the sibling that comes immediately after the selected element);
eg. &__input:placeholder-shown + &__label {

   }

// input and the next to next element (i.e. general sibling selector: ~)

//      opacity: 0;
        visibility: hidden;
**we cannot simply use visibility 'none' and as we cannot animate the visibility;

Q: How to add a animated input field with translated label:
&__label {
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display: block;
        transition: all .3s;
    }

    //written nothing in the input box, the label needs to be hidden;

    &__input:placeholder-shown + &__label {
        opacity: 0;
        visibility: hidden;
        transform: translateY(-4rem)
    }

BUILD CUSTOM RADIO BUTTONS:
**In order that HTML consider the two input as a group, we need to give the same name attribute!
name="size"

**Create a span element inside the label for styling purpose;
//we cannot style the radio button in CSS directly

**Hide the input button, but it will still be working as it is been connected to the label already;

**
