css-cascading style sheets
LEVEL 1 (basics of css)
-------
html-structure/layout of website
css-style
js-logic(working)

css is a language that is used to describe the style of a document

!+enter= basic html format in VISUAL STUDIO

basic syntax of css
selector: to select the element where the css to be applied
property: eg. color
value(;): specification of that property eg.red (;)

including style-3 ways
inline
<h1 style="color: red"> Hello </h1>

style tag
<style>
h1{
color: red;
}
</style>

external stylesheet:
writing CSS in a separate document and linking it with html file
this is including a line in head tag
<link rel="stylesheet" href="file name">
rel:(relation)this attribute names a relationship of the linked document to the current document
href: this attribute specifies the URL of the linked resource(file name)
-------------------------------------------------------------------------------------------------------

Color property
used to set the color of foreground(text, button, link)
color: red;

Background color property
used to set the color of background
background-color: pink;

process of design :
figma------frontend------copying the code for the design
tip1:<p class="first"> --- .first
tip2:<p id="second"> -----#second
tip3:<h2>third</h2> ------h1
eg.
h1{
background-color: blue;
}
------------------------------------------------------------------------------------------------------------

COLOR SYSTEMS
-------------
RGB:RED GREEN BLUE (follow the color theory)---use 'colour picker' from google
range: 0-255
eg: red=rgb(255,0,0)
    blue=rgb(0,0,255)
    yellow=rgb(255,255,0)

HEX(Hexadecimal) 0-f
16 digits(0-9 and a,b,c,d,e,f)
range: 0-ff
color:#ff0000;
following same rgb colors:
ff 00 00
r   g  b =RED
eg: red=#ff0000
    green=#00ff00
    white=#000000
    yellow=#ffff00
-----------------------------------------------------------------------------------------------------------

SELECTORS
---------
tip1: '*' - asterisk
tip2: '&' - ampersand

tip1:<p class="first"> --- .first
tip2:<p id="second"> -----#second
tip3:<h2>third</h2> ------h1
eg.
h1{
background-color: blue;
}


1. Universal SELECTOR *{}
selects all the things in the html
eg. *{
color: blue;
}

2. Element SELECTOR -h1{}
for the particular element like heading, button, paragraph
eg. button{
color: brown;
}

3. Id SELECTOR - #myld{}
unique name/individual id for the element (best for single elements)
eg. #headingone{
color: yellow;
}

4. Class SELECTOR- .myClass{}
when multiple elements need same styling id
eg: .myclass{
color: pink;
}
--------------------------------------------------------------------------------
PRACTICE SET 1
tip1: /* _______*/ - it is used for the comment purpose, not for coding
tip2: for multiple selection, h1, h2, h3 can be used
tip3: the last given command is followed in the coding
tip4: parent tag(the first one) and child tag (tag present inside that)
      child tag follows the property given for the parent tag
--------------------------------------------------------------------------------
TEXT PROPERTIES
---------------
text-align: left/right/center
ccs3: start and end for different languages writing style

text-decoration: underline/overline/ line-through
refer mdn website for css styles documentation

font-weight: normal/bold/light/bolder
font-weight: 100-900

font-family: arial, roboto (font style)
tip1: font1, font2---priority in descending order

unit in css:
------------
absolute: pixels(px)
96px=1 inch=2.54 cm
eg. font-size:16px (default);

line-height: the space taken by a single line

text-transform: uppercase/lowercase/capitalize/none
--------------------------------------------------------------------------------
PRACTICE SET 2

html;
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>The school</h1>
  <div id="outer">
    Outside</div>
    <div id="inner">
      Inside
    </div>
  </div>
</body>
</html>

css;
h1 {
    text-align: left;
    text-decoration:crimson wavy underline;
    text-transform: capitalize;
    color:blue
}

#outer{
    font-size: 25px;
}
#inner{
    font-size: 10px;
}

--------------------------------------------------------------------------------
LEVEL 2
-------
BOX MODEL IN css
height: area occupied by the content in vertically
it sets the content area height of the elements
eg. div{
height: 50px;
}

width: area occupied by the content in horizontally
it sets the content area width of the element
eg. div{
width; 50px;
}

border: enclosing line for boundaries
used to set an element's border
border-width:2px
border-style: solid/dotted/dashed
border-color: black;

*short cut*---border: 2px solid black;
border property: width style color

border radius: used too round the corners of an element's outer border edge
eg. border-radius: 10 px;
 border-radius: 50%;

padding: spaces between content and padding
padding-left: 25px
padding-right: 25 px
padding-top
padding-bottom

margin: space between two boxes
--------------------------------------------------------------------------------
PRACTICE SET 3
creating navigational bar for amazon
tip1: before starting developing any designs, use
*{
padding: 0;
margin: 0;
}
This helps in removing any extra margins readily present in some elements.

html;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="navbar">
    <a id="logo" href="#">amazon.in</a>
    <a href="#">Account</a>
    <a href="#">My Cart</a>
    <a href="#">Contact Us</a>
    <input placeholder="Search amazon.in">
    <button>Search</button>
</div>
</body>
</html>

css;
*{
    padding:0;
    margin: 0;
    color: white;
}

#navbar{
    height: 60px;
    background-color: #0f1111;
}

#logo{
    font-size: 25px;
    color: #f08804

}

button{
    background-color: #f08804;
}

a{
    margin-right: 200px;
}
--------------------------------------------------------------------------------

DISPLAY PROPERTY
----------------
in html, there are two types of elements:
block: occupies 100% width(div,h1)--starts from next line by default
inline: occupies only required width(button, input, anchor tag)

display: inline / block / inline-block / none
inline:-takes only the space required by the element (no margin/padding)
block:-takes full space available in width
inline-block:-similar to inline but we can set margin and padding
none: to remove the element from document flow/ to make it disappear

VISIBLITY PROPERTY
------------------
visibilty: hidden; ( to make elements invisible)
NOTE:--- When visibility is set to none(hidden), space for the element is reserved.
But for display set to none, no space is reserved or blocked for the element.

ALPHA CHANNEL
-------------
opacity (0 to1)------can be used to set visibilty
RGBA:-
color: rgba(255, 0, 0, 0.5)----mild red with partial opacity
color: rgba(255, 0, 0, 1)-----red with full appearance
--------------------------------------------------------------------------------

PRACTICE SET 4
--------------
TIP1: use google searched codes for incorporating symbols in html
tip2: bg color can be given from the inline styling itself
--------------------------------------------------------------------------------

LEVEL 3
-------
UNITS IN CSS
------------
absolute units: px, cm, mm, and inch (fixed)

relative units:--
----------------

percentage (%):-
it is often used to define a size as relative to an element's parent object
eg. <div>
      <div></div>
    </div>

    div1- parent
    div2-child
width: 33%; ----- div1(100%) and div2(33%)

em:-font size of the parent
2em= two times of the parent's font size

rem(root em)-font size of the root element
(depends upon the font size of the root element or basic element)

vh--relative to 1% viewport(browser)height
vw--relative to 1% viewport width
eg. height: 1vh;----it becomes the one percent of viewport height
    height: 50vh;---it becomes the 50% of viewport height

POSITION PROPERTY
-----------------
the position css property sets how an element is positioned in a document

position: static / relative / absolute / fixed;
-----------------------------------------------
tip: #box---= <div id="box"></div>

static:-default position (cannot be changed) any position have no effect

relative:-element is relative to itself
(the top, right, bottom, left and z-index will work)

absolute:-positioned relative to its closest positioned ancestor

fixed:-used top create navbars

positioned relative to browser; always stays in the same position

sticky:-position based on user's scroll position
becomes fixed  when the scroller reaches the correct position

z-index: it decides the stack level(layer) of elements
overlapping elements with a larger z-index cover those with a smaller one
comes related to the z-axis in the math axis plane(3d)
z-index: auto(0)
z-index: 1/2...
z-index: -1/-2...

BACKGROUND IMAGE
----------------
used to set an image as background
background-image: url("image.jpeg");

background-size: cover / contain / auto
cover: no empty space in the container of image, completely fits in
contain: fit image completely (image becomes small to fit in the container)
auto : by default how much the image is able to get in the container
--------------------------------------------------------------------------------
PRACTICE SET 5
--------------------------------------------------------------------------------

LEVEL 4
-------

Flexbox (flexible box layout)
-----------------------------
It is a one-dimensional layout method for arranging items in rows or columns.

flex container----display: flex;
flex item----elements present in the flex container
main axis---horizontal direction
cross axis---vertical direction

Flexbox direction
-----------------
It sets how flex items are placed in the flex container
along which axis and direction

flexbox-direction: row; (default)---main-axis: left to right
flexbox-direction: row-reverse;----main axis: right to left
flexbox-direction: column;-----main-axis: top to bottom
flexbox-direction: column-reverse;---main-axis: bottom to top

tip1: direction is such a property used for the whole container and not for the individual items
tip2: it always fits inside the container, till the space of content is not disturbed

FLEX PROPERTIES:----for flex container
---------------
justify-content: alignment along the main axis
flex start / flex-end / centre / space-evenly / space-between / space-around;
#flex-start: start of the main axis
#flex-end: end of the main axis
#centre: aligns along the centre of main axis
#space-around: space given equally...the margin space is half of the space given inbetween
#space-betwwen: no extra spaces in the margins
#space-evenly: evenly spread of spaces (both margins and inbetween)

flex-wrap: nowrap / wrap / wrap-reverse

align-items : alignment along the cross axis

align-content : alignment of space between and around the content area

FLEX PROPERIIES:-----for flex items
----------------------------------
align-self: alignment of individual along the cross axis

flex-grow: how much a flex item will grow relative to the rest of the flex items if space is available

flex-shrink: how much a flex item will shrink relative to the rest of the flex items if space is available
----------------------------------------------------------------------------------------------------------
PRACTICE SET 6
--------------
use flexbox to center one dix inside another div.
--
display: flex;
justify-content: center;
align-items: center;

tip# priority of align-self is more than that of align-items
--------------------------------------------------------------------------------
MEDIA QUERIES
-------------
helps create a responsive website
for changing color, size and properties for various screen size

@media(width: 600px){
div{
background-color: red
}
}

@media(min-width: 600px){
div{
background-color: red;
}
}

@media(min-width: 200px) and (max-width:300px){
div{
background-color: red;
}
}
--------------------------------------------------------------------------------
LEVEL 5----ADVANCED CSS
-------

TRANSITIONS property
--------------------
Transitions enable you to define the transition between two states ( hovered, active) of an element.

transition property: property you want to transition (font-size, width,)
transition-duration: 2s / 4ms
transition-timing-function: ease-in / ease-out / linear / steps
transition-delay: 2s / 4ms

setting a pseudoclass: defines different state of the element

TRANSITION SHORTHAND:
property name--duration--timing function--delay

transition: font-size 2s ease-in-out 0.2s;

CSS transform
-------------
Used to apply 2D and 3D transformations to an element

ROTATE:
-------
transform: rotate(45deg);
rotate: 45deg;
rotateX: 45deg;
rotateY: 45deg;
rotateZ: 45deg;

tip#: rotate: x 45deg;------not visible as it gets flat and no height is available
 rotate: y 45deg;------not visible as it gets flat and no width is available
  rotate: z 45deg;------visible as it gets rotated on the z-axis only

SCALE
-----

transform: scale(2);-----x,y
transform: scale(1,2);------x=1, y=2
transorm-scaleX(2);-----ONLY ALONG X AXIS


TRANSLATE
---------
used to move the position of the element from the origin along its axis

transform: translate(20px);-----translate in both axis
transform: translate(20px,50px);

transform: translateX(20px);-----right side
transform: translateX(-20px);-----left side

SKEW
----
It's a mixture of different effects
Draging from both the corners of the element
transform: skew (30deg);

ANIMATION
---------
To animate CSS elements

@keyframe myName{
from{font-size: 20px;}
to{font-size: 40px;}
}

----keyframe---template / blueprint / layout
--- myName----name of my animation

ANIMATION properties
--------------------
animation-name
animation-duration--specifies the length of time of the animation sequence
animation-timing-function--sets the pace of the animation
animation-delay
animation-iteration-count = how many times my animation has to apply

animation-direction
normal=from -to (plays forwards each cycle)
reverse=to-from (plays backward each cycle)
alternate= reverses direction each cycle

Animation SHORTHAND
-------------------
animation: myName 2s linear 3s infinite normal

{name-duration-timing function-delay-iteration count-direction}

% in Animation
--------------
to make changes in the middle of animation process i.e. from(0%)- to(100%)

@keyframe myName{
0% {font-sixe:20px;}
50% {font-size:30px;}
100% {font-size:40px;}
}
--------------------------------------------------------------------------------
PRACTICE SET-8
Create a simple loader

#html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="loader"></div>
</body>
</html>

#CSS
.loader{
    height: 100px;
    width: 100px;
    border-radius: 50%;
    border: 20px solid grey;
    border-top: 20px solid black;
    animation: spinAnimate 1s ease-in 0s infinite normal;
}

@keyframes spinAnimate {
    from{
        transform: rotate(0deg);
    }
    to{
        transform: rotate(360deg);
    }
}
--------------------------------------------------------------------------------

PROJECT- AMAZON.COM WEBPAGE
--------------------------
STEPS TO CREATE AMAZON WEB PAGE:
1. Create a hmtl and css file under a project folder in vscode
2. Download and bring the required images and logo to the project folder
3. Link the cdn font awesome tag link to get access to the icons available in the web.

'cdn-content delivery network
(connects our system to the nearest data server to get any video/image/icon)''

4. Apply universal selector for common properties:
margin-font-family-border
border-box: The border has to apply within the box height and width itself
5. Create navbar:
Include logo
tip#: apply your font size in rem for a responsive website
tip#: separate the elements of the navbar and set the properties.
tip#: We can use combination of selectors
eg. .nav-cart i-----for the icon present in the 'nav-cart' Class

tip#: For inline styling use double quotes outside and single inside if url tag used.
tip#:Don't write the same code twice inside write it in the parent section itself

6. Create a content section
tip#:style for 1 box and copy the code for all similar box you needed

7. Create bottom panels--about three sections according to the given TEXT
