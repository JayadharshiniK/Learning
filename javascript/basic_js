Install Nodejs
Create a git repository for JavaScript
Clone it to local folders through command line
Open it in VS code
Type the code
Run the code using command: 'node .\variablesEg.js'
--------------------------------------------------------------------------------
******JavaScript******
--------------------------------------------------------------------------------
What is JavaScript?

*JavaScript is a dynamic, weakly typed programming language which is compiled at
 runtime. It can be executed as part of a webpage in a browser or directly on any
 machine (host environment);
 //Dynamic, Interpreted programming language:
 **Not pre-compiled, instead parsed and compiled "on the fly" (eg. in the browser)
 **Code evaluated and executed at runtime
 **Code can change at runtime (eg. type of a variable)
// Weakly typed programming language:
** Data types are assumed (eg. assigned to variables) automatically
**You don't define that some variable has to hold a certain value (eg.a number)
** Data types are not set in stone but can change

*Interpreted, "on the fly" compiled language

//How is JavaScript executed?
--when your code want it to have some effect on the web page (i.e. to run the JavaScript code),
we need a JavaScript engine (it's built into the browser)
eg. V8-(CHROME)
SpiderMonkey-(Firefox)

--JavaScript Engine=>> Parse code--> Compile to machine code-->Execute Machine code-->Effect on webpage

*"Hosted language": Runs in different environments (eg. in browser)
*Most prominent use-case: Run code in a browser (on a webpage)

 How do web pages work?

 *You are the user visiting a web page
 *Visit and interact with your machine where the browser installed on it
 *You click on a URL- (initial visit)Request is sent on to the server(where the webpage or html file is stored)
 *The server then ,loads the web page and sends it back to your browser as a 'response'
 //JavaScript simply makes this process more interactive

 Dynamic webpages?
*JavaScript helps to load information on the same web page like pop-up windows &
menus instead of sending another html request for a new page.

JavaScript runs on a host environment
-------------------------------------
**Browser-side:
=>JavaScript can manipulate the HTML code, CSS, send background Http requests & much more
=>It cannot access the local filesystem, interact with the operating system, etc.

**Other eg. Server-side
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
JavaScript Introduction:

Role of JS on website:
HTML:- Structure
CSS:- Styling
JS:- Functionality (Dynamic update, controlling multi-media, animations)

What it is so popular:
*Easy to learn
*Standardized by ECMA International
*Biggest Community on stack over follow
*Can be use in both Frontend and backend
*Good PERFORMANCE
*Lots of frameworks (angular js)

================================================================================

JavaScript:-- w3 schools

JavaScript today: Web/ Mobile apps; Real-time networking applications; command-line tools and games

EMCA Script: Specification
JavaScript: Programming language

Setup:
1. Include: <script></script> at the bottom of the body part--best practice

**Statement: Is a piece of code that expresses an action to be carried out

Change HTML Content
document.getElementById("demo").innerHTML = "Hello JavaScript";

1. <!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can change HTML content.</p>

<button type="button" onclick='document.getElementById("demo").innerHTML = "Hello JavaScript!"'>Click Me!</button>

</body>
</html>

--------------------------------------------------------------------------------
JavaScript- Telukso
-------------------
Variables:- Place for storing data temporarily
//consider num as a box for storing the data
let num = 2 + 2    -----let is a keyword using which we can create a variable;
console.log(num)

console.log(num + 3)

//There is no need to declare the variable multiple times
//Read the error before jumping into the code

//A variable name can have:
**characters
**numbers except first position
**special symbols $ and _
**No spaces are allowed
# snake casing rule: user_name
# camel casing rule: userName

// For assigning a constant value, use 'const'

DATA TYPES:
-----------
//Most applications: to store data, to process it and to analyze DATA

1. Primitive:
-> NUMBER:

//floating point representation

//tpyeof--to know the type of the input

//tpyes of numbers:
-> base 10 - decimal (0-9)
-> base 2 - binary(0 & 1)
-> base 8 - octal(0-7)
-> base 16 - hexadecimal (0-9 & A-F) ---use 0x to represent a hexadecimal number;
-> exponential:= 1.5e12= 1500000000000

tip#: 1_00_000 for identifying the number easily

//BigInt: for very larger numbers! [USE 'n' at the end of the number declared]
/cannot mix BigInt and other types

-> STRING (text):

// "\n"--new line print
// "\t"--a tab
// "\b"--a backspace

-> BOOLEAN: true or false;

-> Null:

-> Undefined:
//Nan- not a number
-> Symbol
2. Object: All exclusive of primitive data

HISTORY OF JAVASCRIPT:
**Interpreted language: Reading and executing the code line by line--slow
**Compiled Language: The whole code file is compiled onto a single file, and then run by a compiler--faster

//v8 engine by chrome:-- the JavaScript files will be both interpreted and compiled
--Just in time compiler

//node.Js-- is the environment to run the JavaScript engine

TYPE CONVERSION & TYPE COERCION:
EXPILICIT CONVERSION:
//Store number in string format if there is no calculations needed:
let num = String(6)
console.log(num, typeof num);

TYPE CORECTION: When you have two different type of data, and when the operation is performed;
//when you have a subtraction option with a number, it will convert it to a number
// ! --it gives the opposite result:-- if it is true, then the output will be false
// 0--> is always for false, and the other numbers are true!

ARITHMETIC OPERATIONS:
%--is for

Shorthand for add8ing the number to itself: num +=2
num++  => the increment for itself + 1
num--  => the decrease from itself -1

//num++ -- pre-increment
//++num-- post-increment

//num-- = pre-decrement
//--num = post-decrement

//ASCII VALUE:- for comparing two strings

//comparing number and string:
the string will be converted into a numbers
= --assignment Operators
== -- comparing
=== -> Strict equality Operators (compares both the data and the tpye)

opertors:
and && -- both given conditions needed to be true, to get true
or ||  -- anyone of the conditions must be true, to get true
not !

CONDITONAL STATEMENTS:
// if and else conditions can only have one statement, unless used with curly braces

TERNARY OPERATIONS:
result = num%2===0 ? "even" : "odd"

SWTICH STATEMENT:
case 1 ..and don't forget to put the break after each case!
//otherwise the statements get

TEMPLATE LITERAL:
let num1 = 9
let num2 = 5
let result = num1 + num2
console.log(`The addition of ${num1} and ${num2} is ${result}`)


LOOPS:
use ; for the inline declaration without the variable.
** Initialization
** Condition testing
** Increment

#while:--check the condition and then go for the output
#do-while:-- Do it and then check for the condition
#for while:-- inline :
for(initialExpression; condition; step) {
  console.log

Which loop to use & when?
//when we know the starting and ending point ==> "For loop"
eg. all the number till divisible by 3

//when you don't know the number of digits present in the given variable or
 know the required number of digits and you know the condition when to stop;----"while loop"

 OBJECTS: Objects are variables too. But objects can contain many values.
 Object literal:
 //key : value

 eg. const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

 eg. const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

To get a single value/keyword from the object:
console.log(alien.name);--dot operator

console.log(alien['name']);
--square bracket operator (have to be used for the class name with two words)
eg. console.log(alien['work exp']);


COMPLEX OBJECTS:
---------------
??-Nullish coalescing opertor is denoted as (??) Double question mark

//objects;
//nested objects;
//deleting the property;
//how to use ? ;

//for in loop:
**key is used for fetching values in an object
**for (let key in emply) {
    console.log(key);
}

**console.log(key, emply[key]);----for fetching key and its value;

FUNCTIONS:
----------
//defining a function
//calling a function

//return: When a return statement is used in a function body, the execution of the function is stopped.
--Assigning a own value and then giving the value to the place where they are being used.

Function expression:
Expression is a thing which gets evaluated and get assigned to a variable
//parameters:- is the one given to the bracket of Function
//augument:- is the one which is given in the brackets of the called result (function) statement;

//LOCAL VARIABLE: created inside a function
//GLOBAL VARIABLE: created outside a function, basically in the code

//default value for the variable:
num3=1; --- it only works when the value is not assigned to the variable;

ARROW FUNCTIONS:
---------------
In arrow functions, we don't need to mention the curly braces, if there is only one function assigned;

AADING A FUNTION TO AN OBJECT:
-----------------------------

"This" keyword:-
