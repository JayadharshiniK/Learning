React:
A open source Javascript library that is used to build User Interface(UI)

Main concepts:
1. React routers
2. React Hooks & Custom Hooks
3. State Management with Redux
4. Redux Saga
5. React Localization (i18n)
6. React Firebase
7. React Typescript
8. React GraphQL
9. Payment Integration
10. React PWA
11. Next.js & Remix.js

Library: Library accomplish certain functionality Eg. Registration Forms, Image carousel
Framework: Framework has all tools built-in. Eg. Next.js, Vue, Remix.js


Why REACT JS was created?


//MPA: Multipage application, all info in the same page, and it takes time to get loaded
//SPA: Single-page application, we can achieve a larger page application without getting reloading
Google created--> Angular JS
Meta created--> React JS

How React JS was created?

FaxJS:
Makes the Whole DOM process fast and more efficient
2013--> React JS


//When a web page is loaded, the browser creates a Document Object Model (DOM) of the page

Performance: It will change only the data that is changed. Giving us Performance benefits
JSX helps to mix HTML & Javascript

With React, we can build:
Mobile apps--> React Native
Virtual Reality-->React 360
Desktop apps--> Electron.js


Setting up react app:
1. Open a folder in vs code
2. Open terminal
3. Go the created file
4. Enter the command: "npx create-react-app ."
5. Happy hacking -- the message to denote install
6. Files like node-modules, public, json files and gitingore will be created


To make the file to run, type on comment line:
'npm start'

Pre-requisite:
Extensions in VS CODE:
1. Simple React Snippets
2. ES7+ React/Redux

Extensions in Chrome:
1. React Dev Tools

--------------------------------------------------------------------------------
Components: They serve the same purpose as JavaScript functions, but work in isolation and return HTML.
JSX:-->
*It is a syntax by React JS, which allows you to rendering logic with UI stuff;
*In JSX, we always return a components with UI stuff.
*The return value is the JSX code to render to the DOM tree.
*JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.
*JSX converts HTML tags into react elements.
*Use {} to bring in the JS elements in JSX; we cannot pass boolean values, objects inside the curly braces

Eg:  <User />  --> Calling the variable

Props:

<User name="Pedro" age={21} email="pedro@pedro.com" />

Code:
function App() {
  const name = "Craze";
  return (
    <div className="App">
      <h1>{name}</h1>
      <User name="Pedro" age={21} />
      <User name="Jessiaca" age={31} />
      <User name="Perter" age={29} />
    </div>
  );
}

let User = (props) => {
  return (
    <div>
      <h1>{props.name}</h1>
      <h1>{props.age}</h1>
    </div>
  )
}

Ternary Operators, Lists in React & Css in React:
-------------------------------------------------

Default styling given in App.css:
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


CONDITIONAL RENDERING:

1). if, else statement:
const age = 15;
if (age>=18) {
  console.log("IS AN ADULT");
}
if (age>=18) {
  console.log("IS NOT AN ADULT");
}

2). Ternary operation:
age>=18 ? console.log("IS AN ADULT") : console.log("IS NOT AN ADULT")

//GROCERY LIST

function App() {

  function handleNameChange() {
    const names = ["Earn", "Grow", "Give", "Spend"];
    const int = Math.floor(Math.random()*4);
    return names[int]
  }

  return (
    <div>
      <h1>This is the intro</h1>
      <p>Let's {handleNameChange()} money</p>
    </div>
  )
}

//components and props

function App() {
  return (
    <div className="App">
      <Job salary={90000} position="Senior SDE" company="Amazon" />
      <Job salary={12000} position="Junior SDE" company="Google" />
      <Job salary={15000} position="Project Manager" company="Mc Donalds" />
    </div>
  );
}

let Job = (props) => {
  return (
    <div>
      <p>{props.salary}</p>
      <p>{props.position}</p>
      <p>{props.company}</p>
    </div>
  )
}
--------------------------------------------------------------------------------
REACT_FUNCTIONAL COMPONENTS:
---------------------------
CNTRL + ALT + R --- For searching a snippet

rafce --> Create a react arrow function component with ES7 module system

<Header /> --> Denotes a component

Why components?:--> reusability
--------------------------------------------------------------------------------

React_Applying CSS Styles:

1. Applying Inline Styling:
const Header = () => {
    const headerStyle = {backgroundColor: 'blue', color: 'white'}
  return (
    <header style={headerStyle}>
        <h1>
            To do list
        </h1>
    </header>
  )
}

--------------------------------------------------------------------------------
React_Click events:

1. To call a parameter in the JS function, we need to call the anonymous function:
eg.:

const handleClick2 = (name) => {
        console.log(`Successfully added! ${name}`);
     }

  return (
    <main>
        <p> Let's {handleNameChange()} </p>
        <button onClick={() => handleClick2('Jatin')}>Add to list</button>
    </main>

  )


  2. Click events example:
  function handleNameChange() {
        const names = ["Earn", "Grow", "Give", "Spend"];
        const int = Math.floor(Math.random()*4);
        return names[int]
      }

    const handleClick = (e) => {
       console.log(e.target.innerText);
    }

    const handleClick2 = (name) => {
        console.log(`Successfully added! ${name}`);
     }

  return (
    <main>
        <p onDoubleClick={() => handleClick2('Bala')}> Let's {handleNameChange()} </p>
        <button onClick={(e) => handleClick(e)}>Add to list</button>
    </main>

  )
}
--------------------------------------------------------------------------------
use State Hook:
**changing the properties of this state of a single component, need not to reload
the entire page
**we cannot utilize use state in class COMPONENTS
**we cannot utilize use state in conditional statements

eg:.
const [name, setName] = useState( ()=>name());
==> Calling a function inside another function can reduce the replication of the
function to be called  --> This helps to reduce the reload rate and can handle
the site speed and size.

To show the increase and the decrease button:

function incrementFunction() {
      setCount(count +1)
    }

    function decrementFunction() {
        setCount(count -1)
      }

  return (
    <main>
        <p> Let's earn money </p>
        <button>Add to list</button>
        <button onClick={decrementFunction}>-</button>
        <span>{count}</span>
        <button onClick={incrementFunction}>+</button>
    </main>

  )
}
--------------------------------------------------------------------------------
React_lists and keys:

* The map,is used to get the itemns of an array as a list//
* The filter function is used to separate the values of an array according to the logic written;

** const handleCheck = (id) => {
  const listItems = items.map((item) => item.id===id ? {...item, checked: !item.checked} : item)
  setItems(listItems)
}

..item --> This helps to get all the other values of the array to the new array when
only one value is changed.

 localStorage.setItem("to_do_list", JSON.stringify (listItems)) ---> To store the changes made in the app

--------------------------------------------------------------------------------
Props and Prop drilling:
------------------------
**
Header.defaultProps = {
  title: "To do list"
}
---> This helps to display the given property, if the external file fails to
bring the data.

Prop Drilling: The challenge of passing data and state between components that
are not directly nested arises, known as “prop drilling”

//Sharing info from one component to another component

//Usually components are functions, and passing a parameter to it, is called as Props;
//Prop-Drilling can't be done between each siblings;

//To get the no. of items in the footer;

**Abstraction: Grouping small logic as components; improves readability;
//Creating components for item list logic;

--------------------------------------------------------------------------------
CONTROLLED COMPONENT INPUTS:
----------------------------
--------------------------------------------------------------------------------
REACT HOOKS:
-----------

Basic Hooks:
1. useState:
const [count, setCount] = useState("")
//To manage states. Returns a stateful value and an updater function to update it.

2. useEffect:
//To manage side-effects like API calls, subscriptions, timers, mutations, and more.
//Used primarily for making API calls;
[]---pass an empty array meaning that data should not trigger a use effect call,
if the website is reloaded, the function runs only once.

3. useContext (redux alternative)

Additional Hooks:

1. useReducer:
const [state, dispatch] = useReducer(reducer, { count: 0, showText: true });
//A useState alternative to help with complex state management.

2. useCallback
3. useMemo

4. useRef:
function RefTutorial() {
  const inputRef = useRef(null);

  const onClick = () => {
    inputRef.current.value = "";
  };
It returns a ref object with a .current property. The ref object is mutable.
It is mainly used to access a child component imperatively.

5. useImperativeHandle:


6. useLayoutEffect:
//It is called earlier than the use effect always, in a page rendering..
//It can be used in cases where you want to change the layout of the application
before it actually prints out to the user!


7. useDebugValue:
Helps to display a label in React DevTools for custom hooks.

================================================================================
BUILDING A SIMPLE CALCULATOR:

* To select a the buttons inside a div, :
.calculator-grid > button {}

*Word-wrap property to get the words have space or broke to the next line;

*states involved in this calculator: --use a reducer inside the react
1. current-operand
2. previous-operand
3. operation

================================================================================
To make the Git cloned code to work, we need the node modules to get the required
data files for the dependencies. Use "npm install" to install the node modules folder.

## Check the port:3000, if not supported, remove the port value.
